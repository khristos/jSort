<!DOCTYPE html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="utf-8">
	<meta name="description" content="SOG assignment">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Society of Grownups &mdash; Assignment</title>

	<style>
		table {
			border-collapse: collapse;
			border-spacing: 0;
			border: 1px solid #bbb;
		}
		td, th {
			border-top: 1px solid #ddd;
			padding: 4px 8px;
		}
		th {text-align: left;}
		td {width:20%;}

		.sortable th.desc:after {
			content: "\25B2";
		}
		.sortable th.asc:after {
			content: "\25BC";
		}

		ul, li {list-style: outside none none; padding:0; margin:0;}

		@media screen and (max-width: 959px) {
			table {
				width: 100%;
				overflow-x: auto;
				display: block;
			}
		}
	</style>

	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
	<link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/themes/smoothness/jquery-ui.css" />
	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>
</head>

<body>

	<script>
	var films = [
						{
							Title: "2001: A Space Odyssey",
							Rating: 9.5,
							Genre: "Science Fiction"
						},
						{
							Title: "The Last House on the Left",
							Rating: 4.1,
							Genre: "Horror"
						},
						{
							Title: "Shrek",
							Rating: 8.8,
							Genre: "Family"
						},
						{
							Title: "2012",
							Rating: 3.9,
							Genre: "Drama"
						},
						{
							Title: "Up",
							Rating: 9.8,
							Genre: "Family"
						},
						{
							Title: "Interstellar",
							Rating: 7.3,
							Genre: "Science Fiction"
						},
						{
							Title: "Shrek 2",
							Rating: 8.8,
							Genre: "Family"
						}
  ];

	var matrix = matrix || {};

	matrix = (function(window, document, jQuery) {
		'use strict';

		var id = "content";
		var sorterPrototype, addEvent, removeEvent;
		var hasEventListener = !!document.addEventListener;

		if ( !Object.create ){
			Object.create = function(prototype) {
				var Obj = function() { return undefined; };
				Obj.prototype = prototype;
				return new Obj();
			};
		}

		// event binding
		addEvent = function(element, eventName, callback) { 
			if (hasEventListener) { 
				element.addEventListener( eventName, callback, false ); 
			} else {
					element.attachEvent( 'on' + eventName, callback ); 
			}
		};

		// event removal
		removeEvent = function(element, eventName, callback) { 
			if ( hasEventListener ) { 
				element.removeEventListener( eventName, callback, false );
			} else {
					element.detachEvent( 'on' + eventName, callback ); 
			}
		};


		sorterPrototype = {

			initialize: function(table, initialSortColumn) {
				var that = this, i;
				$('body').append('<div id="' + id + '"></div>');

				that.containMatrix();
				//that.sortMatrix();
				//that.populateMatrix();

				if ( typeof table === 'string' ){
					table = document.getElementById(table);
				}

				that.table = table;
				that.ths   = table.getElementsByTagName("th");
				that.tbody = table.tBodies[0];
				that.trs   = that.tbody.getElementsByTagName("tr");
				that.boundSort = that.sortMatrix.bind(that);
				that.boundCompare = that.compareValues.bind(that);
				that.sortColumn = initialSortColumn;
				that.defaultSortType = "numeric";
				that.sortMatrix();
				that.populateMatrix();
				//that.getSortAlgorithm = that.getSortAlgorithm("numeric");

				console.log("that: ", that);

				for (var i = 0, length = that.ths.length; i < length; i++ ) {
					addEvent( that.ths[i], 'click', that.boundSort );
				}
			},

			containMatrix: function() {
				var html = [
					'<table id="table1" class="sortable">',
						'<thead>',
						  '<tr>',
						      '<th data-sorttype="string" id="Title">Title</th>',
						      '<th data-sorttype="number" id="Rating">Rating</th>',
						      '<th data-sortType="string" id="Genre">Genre</th>',
						  '</tr>',
						'</thead>',
						'<tbody></tbody>',
					'</table>'
					].join('');
				$('#' + id).html(html);
			},

			compareValues: function(a, b) {
				var that = this;
				var key = that.sortColumn;
				var type = that.defaultSortType;

				switch (type) {
					case "numeric":
						return function(a, b) {
							return a[key] - b[key] || a.key.localeCompare(b.key);
						};
					case "string":
						return function(a, b) {
							a = a.toLowerCase();
							b = b.toLowerCase();
							return +(a.key > b.key) || +(a.key === b.key) - 1;
						}
					default: /* string */
				}
				//var a_compare = a.Rating, b_compare = b.Rating;
				//return a_compare > b_compare ? 1 : a_compare < b_compare ? -1 : 0;
				//return (a_compare - b_compare) || a_compare.localeCompare(b_compare.name);
				return a.Rating - b.Rating || a.Rating.localeCompare(b.Rating);
			},

			getSortAlgorithm: function(a,b) {
				var that = this, key, type, target;
				if (e) {
					target = e.target;
					var sortHash =  {
						key: target.firstChild.nodeValue,
						type: target.getAttribute('data-sorttype')
					}
					key = sortHash.key;
					type = sortHash.type;
				}
				else {
					key = that.sortColumn;
					type = that.defaultSortType;
				}
				console.log("type: ", type, "\tkey: ", key)

				switch (type) {
					case "numeric":
						return function(a, b) {
							return a[key] - b[key] || a.key.localeCompare(b.key);
						};
					case "string":
						return function(a, b) {
							a = a.toLowerCase();
							b = b.toLowerCase();
							return +(a.key > b.key) || +(a.key === b.key) - 1;
						}
					default: /* string */
				}
			},

			sortMatrix: function() {
				var that = this;
				films.sort(that.boundCompare);
				//films.sort(that.getSortAlgorithm);
			},

			populateMatrix: function() {
				var tr;
				for (var i = 0, length = films.length; i < length; i++) {
					tr = $('<tr/>');
					tr.append("<td>" + films[i].Title + "</td>");
					tr.append("<td>" + films[i].Rating + "</td>");
					tr.append("<td>" + films[i].Genre + "</td>");
					$('table tbody').append(tr);
				}
			}
		};

		return {
			instantiate: function( table, initialSortColumn ) {
				var sorter = Object.create( sorterPrototype );
				sorter.initialize( table, initialSortColumn );
				return sorter;
			}
		};

	}(window, document, jQuery));

	var sorted1 = matrix.instantiate('table1', 'Rating');


   
	//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
	//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
	//http://stackoverflow.com/questions/5421253/sort-javascript-array-of-objects-based-on-one-of-the-objects-properties
	//http://stackoverflow.com/questions/12900058/how-can-i-sort-a-javascript-array-of-objects-numerically-and-then-alphabetically?lq=1
	//http://blog.garstasio.com/you-dont-need-jquery/selectors/
	//http://blog.carbonfive.com/2015/01/05/tidying-up-a-javascript-application-with-higher-order-functions/

	//https://code.tutsplus.com/tutorials/sorting-values-with-javascript--net-7837

	//http://www.terrill.ca/sorting/
	//https://github.com/terrilldent/tsorter/blob/master/src/tsorter.js
	
	//jQuery
	//http://www.designchemical.com/blog/index.php/jquery/sort-items-alphabetically-using-jquery/
	//https://code.tutsplus.com/tutorials/using-jquery-to-manipulate-and-filter-data--net-5351

	//Responsive
	//http://exisweb.net/responsive-table-plugins-and-patterns

	//UI inspiration
	//http://jtable.org/tutorials/usingwithaspnetwebformspagemethods
	//http://css-tricks.com/complete-guide-table-element/
	//http://www.datatables.net/
	//http://designshack.net/articles/css/15-tips-for-designing-terrific-tables/
	

  </script>
</body>
</html>