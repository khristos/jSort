<!DOCTYPE html>
<head>
	<meta charset="utf-8">
	<meta name="description" content="SOG assignment">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Society of Grownups &mdash; Assignment</title>

	<style>
		table {
			border-collapse: collapse;
			border-spacing: 0;
			border: 1px solid #bbb;
		}
		td, th {
			border-top: 1px solid #ddd;
			padding: 4px 8px;
		}
		th {text-align: left; background-color: #C8C8C8; cursor: pointer;}
		td {width:20%;}

		.sortable th.asc:after {
			content: "\25B2";
		}
		.sortable th.desc:after {
			content: "\25BC";
		}

		ul, li {list-style: outside none none; padding:0; margin:0;}

		@media screen and (max-width: 959px) {
			table {
				width: 100%;
				overflow-x: auto;
				display: block;
			}
		}
	</style>

	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
	<link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/themes/smoothness/jquery-ui.css" />
	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>
</head>

<body>

	<script>
	var films = [
						{
							Title: "2001: A Space Odyssey",
							Rating: 9.5,
							Genre: "Science Fiction"
						},
						{
							Title: "The Last House on the Left",
							Rating: 4.1,
							Genre: "Horror"
						},
						{
							Title: "Shrek",
							Rating: 8.8,
							Genre: "Family"
						},
						{
							Title: "2012",
							Rating: 3.9,
							Genre: "Drama"
						},
						{
							Title: "Up",
							Rating: 9.8,
							Genre: "Family"
						},
						{
							Title: "Interstellar",
							Rating: 7.3,
							Genre: "Science Fiction"
						},
						{
							Title: "Shrek 2",
							Rating: 8.8,
							Genre: "Family"
						}
  ];

	var matrix = matrix || {};

	matrix = (function(window, document, jQuery) {
		'use strict';

		var id = "content";
		var sorterPrototype, addEvent, removeEvent;
		var hasEventListener = !!document.addEventListener;

		if ( !Object.create ) {
			Object.create = function(prototype) {
				var Obj = function() { return undefined; };
				Obj.prototype = prototype;
				return new Obj();
			};
		}

		// event binding
		addEvent = function(element, eventName, callback) {
			if (hasEventListener) {
				element.addEventListener( eventName, callback, false ); 
			} else {
					element.attachEvent( 'on' + eventName, callback );
			}
		};

		// event removal
		removeEvent = function(element, eventName, callback) {
			if ( hasEventListener ) {
				element.removeEventListener( eventName, callback, false );
			} else {
					element.detachEvent( 'on' + eventName, callback ); 
			}
		};


		sorterPrototype = {

			initialize: function(table, initialSortColumn, initialSortType) {
				var that = this, i;
				$('body').append('<div id="' + id + '"></div>');

				that.containMatrix();

				if ( typeof table === 'string' ){
					table = document.getElementById(table);
				}

				that.table = table;
				that.ths   = table.getElementsByTagName("th");
				that.tbody = table.tBodies[0];
				that.trs   = that.tbody.getElementsByTagName("tr");
				that.boundSort    = that.sortMatrix.bind(that);
				that.sortColumn   = initialSortColumn; //column name
				that.sortType     = initialSortType;   //numeric or string
				that.sortOrder    = "asc";
				that.map          = null;
				that.sortMatrix();
				that.populateMatrix();

				console.log("that: ", that);

				for (var i = 0, length = that.ths.length; i < length; i++ ) {
					addEvent( that.ths[i], 'click', that.boundSort );
				}
			},

			containMatrix: function() {
				var html = [
					'<table id="table1" class="sortable">',
						'<thead>',
							'<tr>',
								'<th data-sorttype="string" id="Title">Title</th>',
								'<th data-sorttype="numeric" id="Rating">Rating</th>',
								'<th data-sortType="string" id="Genre">Genre</th>',
							'</tr>',
						'</thead>',
						'<tbody></tbody>',
					'</table>'
					].join('');
				$('#' + id).html(html);
			},

			sortMatrix: function(e) {
				var that = this, key, type, order, target;
				var trs  = that.trs, length = trs.length;
				var map  = films;

				if (e) {
					target = e.target;
					target.className = target.className !== 'asc' ? 'asc' : 'desc';

					var sortCriteria = {
						   key: target.firstChild.nodeValue,
						  type: target.getAttribute('data-sorttype'),
						 order: target.className || that.sortOrder
					}
					key   = sortCriteria.key;
					type  = sortCriteria.type;
					order = sortCriteria.order;

					while (length--) {
						that.tbody.removeChild(that.trs[length]);
					}
				}
				else {
					key   = that.sortColumn;
					type  = that.sortType;
					order = that.sortOrder;
				}
				//console.log("presorted: ", films);
				//console.log("type: ", type, "\tkey: ", key);

				switch (type) {
					case "numeric":
						map.sort(function(a, b) {
							var x = parseFloat(a[key]);
							var y = parseFloat(b[key]);
							return  order == "asc" ? x - y : y - x;
						});
						break;
					case "string":
						map.sort(function(a, b) {
							var x = a[key].toLowerCase();
							var y = b[key].toLowerCase();
							var asc = order == "asc" ? 1 : -1;
							//return +(x > y) || +(x === y) - 1;
							return (x == y) ? 0 : ((x > y) ? asc : -1 * asc);
							//return a.key > b.key ? 1 : a.key < b.key ? -1 : 0;
						});
						break;
					default: /* string */
				}

				if (e) {
					that.populateMatrix();
				}
				that.map = map;
			},

			populateMatrix: function() {
				var that = this, tr, map = that.map;
				for (var i = 0, length = map.length; i < length; i++) {
					tr = $('<tr/>');
					tr.append("<td>" + map[i].Title + "</td>");
					tr.append("<td>" + map[i].Rating + "</td>");
					tr.append("<td>" + map[i].Genre + "</td>");
					$('table tbody').append(tr);
				}
			}
		};

		return {
			instantiate: function(table, initialSortColumn, initialSortType) {
				var sorter = Object.create(sorterPrototype);
				sorter.initialize(table, initialSortColumn, initialSortType);
				return sorter;
			}
		};

	}(window, document, jQuery));

	var sorted1 = matrix.instantiate('table1', 'Rating', 'numeric');


   
	//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
	//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
	//http://www.sitepoint.com/sophisticated-sorting-in-javascript/
	//http://stackoverflow.com/questions/5421253/sort-javascript-array-of-objects-based-on-one-of-the-objects-properties
	//http://stackoverflow.com/questions/12900058/how-can-i-sort-a-javascript-array-of-objects-numerically-and-then-alphabetically?lq=1
	//http://blog.garstasio.com/you-dont-need-jquery/selectors/
	//http://blog.carbonfive.com/2015/01/05/tidying-up-a-javascript-application-with-higher-order-functions/

	//https://code.tutsplus.com/tutorials/sorting-values-with-javascript--net-7837

	//http://www.terrill.ca/sorting/
	//https://github.com/terrilldent/tsorter/blob/master/src/tsorter.js
	//http://madhatted.com/2008/1/11/the-joy-of-a-minimal-complete-javascript-table-sort
	
	//jQuery
	//http://www.designchemical.com/blog/index.php/jquery/sort-items-alphabetically-using-jquery/
	//https://code.tutsplus.com/tutorials/using-jquery-to-manipulate-and-filter-data--net-5351

	//Responsive
	//http://exisweb.net/responsive-table-plugins-and-patterns

	//UI inspiration
	//http://jtable.org/tutorials/usingwithaspnetwebformspagemethods
	//http://css-tricks.com/complete-guide-table-element/
	//http://www.datatables.net/
	//http://designshack.net/articles/css/15-tips-for-designing-terrific-tables/
	//http://tristen.ca/tablesort/demo/
	

  </script>
</body>
</html>